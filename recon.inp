recon.inp
{
Starting by just setting up some initial magnetic fields and playing around with them
}

Variables
{
PI = 3.14159

  electronMass = 9.1094e-31 
  electronCharge = -1.6022e-19
  permit = 8.8542e-12 //permitivitty const.
  speedLight = 2.9979e8
  speedLight2 = speedLight*speedLight 
  electronCharge2 = electronCharge*electronCharge 
  qOverM = electronCharge/electronMass

  ionCharge = -electronCharge
  unitMassMKS = electronMass / 5.48579903e-04 
  hydrogenMassNum = 1.00797
  hydrogenMass = unitMassMKS * hydrogenMassNum *20.0


  plasmaDensityMKS = 5.0e22//sets the density outside the current sheet

//converting some things to CGS to calculate things in the same system as standard (e.g. Sironi)
  conv_factor = 1e-6 //number density in mks to cgs
  plasmaDensityCGS = plasmaDensityMKS * conv_factor 
  speedLightCGS = 2.9979e10
  speedLight2CGS = speedLightCGS*speedLightCGS
  electronMassCGS = electronMass*1000.0
  electronChargeCGS = 4.8032e-10 //statcoulombs
  electronCharge2CGS = electronChargeCGS*electronChargeCGS
  KbCGS = 1.3806e-16 //Boltzmann's constant in CGS


//we want to characterize all of the reconnection properties similar to Sironi & spitkovsky:
//all of the following is for a pair plasma, the formalism we use here will break down in the case of a ion-electron plasma

//Parameters of our choice:

Sigma = 10.0 
//Plasma density, given above

//temperature of plasma OUTSIDE the current sheet, Sironi uses: Kb*Tc/mc^2 = 1e-4
//thermal pressure in the sheet must balance magnetic pressure outside
//need overdensity in the current sheet, factor we call "eta"
//pressure balance dictates that the temperature in the current sheet is given by:
//Kb*Th/mc^2 = sigma/(2*eta) i.e. the more dense the current sheet, the less hot it has to be to support against magnetic pressure

//Setting eta and the temperatures:
Tc = 1.0e-4 * speedLight2CGS * electronMassCGS / KbCGS
eta = 3.0 //factor by which plasma in the current sheet is overdense
Th = (Sigma/(2.0*eta))* speedLight2CGS * electronMassCGS / KbCGS

//These choices of eta and sigma yield v > c in the classical equations of maxwellian thermo. 
//because apparently the code inverts a temperature to get a characteristic velocity purely classically
//the rms vecocity given temperature is given by: http://www.marcelhaas.com/docs/maxrel.pdf eqn 21

vhot = speedLight*sqrt(1.0-pow(3.0*KbCGS*Th/(2.0*electronMassCGS*speedLight2CGS)+1.0,-2.0))
vhotrms = vhot / sqrt(3.0)

wp = sqrt(4*PI*plasmaDensityCGS*electronCharge2CGS / electronMassCGS) //plasma frequency
skindepthCGS = speedLightCGS/wp //skin depth
skindepthMKS = skindepthCGS*100.0 
//want to resolve the skin depth in 10 or so cells


xres=2.0 //cells per skin depth
aspect = 2.0

//width of current sheet: 20 skin depths:
LreconCGS=5.0*skindepthCGS
LreconMKS=5.0*skindepthMKS


wc = 2*PI / (sqrt(Sigma)*wp) // larmoor frequency
//want to resolve the larmoor frequency in a few timesteps:
timeStep = wc/2.0


BreconGAUSS = sqrt(Sigma*4*PI*electronMassCGS*speedLight2CGS*plasmaDensityCGS)//in Gauss
BreconTESLA = BreconGAUSS*1e-4 
//plasma skin depth is c/wp where wp = sqrt(4 pi n e^2 /m) (plasma frequency) 

//we have to calculate the drift velocity to give the positrons and electrons to source the current
//I've done this in mathematica for the particular choice of sigma, Lrecon, and density
//gives vdrift = 2.6e8 (extremely close to the speed of light)
positrondrift = -2.6e8
electrondrift = -positrondrift

//Grid parameters
  Lx = 100.0*skindepthMKS //100 plasma skin depths accross
  Nx = Lx*xres //number of grid points in x (xres cells per skin depth)
 
  Ly = Lx/aspect 
  Ny = Ly*xres

  simulationVolume=Lx*Ly*.5
  totalNumPlasma = plasmaDensityMKS * simulationVolume
  numPtclsPerCell = 100
  numCells = Nx * Ny * .5
  numPlasmaPtcls = numPtclsPerCell * numCells
  plasmaNumRatio = totalNumPlasma / numPlasmaPtcls

//Lrecon=Ly/20.0 //sets half-width of current sheet
}

Region
{
Grid
{
J=Nx
x1s = 0
x1f = Lx
n1=1.0

K=Ny
x2s = -Ly/2.0
x2f = Ly/2.0
n2=1.0
Geometry=1
//PeriodicFlagX1=1
//PeriodicFlagX2=1

}
Control
{
dt = timeStep
emdamping = 0.05//not sure about these ones
CurrentWeighting=1//not sure which solver to use

B1init=BreconTESLA*(1-exp(-2.0*(2.0*PI*x2/LreconMKS)))/(1+exp(-2*(2.0*PI*x2/LreconMKS))) //tanh(2*PI*x2/L) w/ asymptotic field strength of Brecon
}

Species
{
name=electrons
m=electronMass
q=electronCharge
}
Species
{
name = positrons
m=electronMass
q = -electronCharge
}
Species
{
name = hotpositrons
m=electronMass
q = -electronCharge
}
Species
{
name = hotelectrons
m=electronMass
q = electronCharge
}

//loading the cold plasma:
Load
{
speciesName=electrons
density = plasmaDensityMKS
temperature=Tc
x1MinMKS=0.0
x1MaxMKS= Lx

x2MinMKS= -Ly
x2MaxMKS= Ly
np2c = plasmaNumRatio
}
Load
{
speciesName=positrons
density = plasmaDensityMKS
temperature=Tc
x1MinMKS=0.0
x1MaxMKS= Lx
x2MinMKS= -Ly
x2MaxMKS= Ly
np2c = plasmaNumRatio
}

//loading the hot overdense plasma
Load
{
speciesName=hotelectrons
density = eta*plasmaDensityMKS
v1thermal = vhotrms
v2thermal = vhotrms
v3thermal = vhotrms
x1MinMKS=0.0
x1MaxMKS= Lx
//vdrift, out of page
v3drift = electrondrift
x2MinMKS= -Ly
x2MaxMKS= Ly
np2c = plasmaNumRatio
analyticF = eta*plasmaDensityMKS*pow(2.0/(exp(2.0*PI*x2/LreconMKS)+exp(-2.0*PI*x2/LreconMKS)),2)
}

Load
{
speciesName=hotpositrons
density = eta*plasmaDensityMKS
v1thermal = vhotrms
v2thermal = vhotrms
v3thermal = vhotrms
x1MinMKS=0.0
x1MaxMKS= Lx
//vdrift into page
v3drift = positrondrift //set this to be negative, into page
x2MinMKS= -Ly
x2MaxMKS= Ly
np2c = plasmaNumRatio
analyticF = eta*plasmaDensityMKS*pow(2.0/(exp(2.0*PI*x2/LreconMKS)+exp(-2.0*PI*x2/LreconMKS)),2)
}

Conductor
{
j1=0
k1=Ny
j2=Nx
k2=Ny
normal=-1 
reflection=1

}
Conductor
{
j1=0
k1=0
j2=0
k2=Ny
normal = 1
//reflection=1
}
Conductor
{
j1=0
k1=0
j2=Nx
k2=0
normal=1
reflection=1
}
Conductor
{
j1=Nx
k1=0
j2=Nx
k2=Ny
normal=-1
//reflection=1
}


}